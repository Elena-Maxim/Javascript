'use strict'
/*Задать температуру в градусах по Цельсию. Вывести в alert соответствующую температуру в градусах по Фаренгейту. 
Подсказка: расчет идет по формуле Tf = (9 / 5) * Tc + 32, где Tf — температура по Фаренгейту, Tc — по Цельсию.*/

var tc = prompt('Введите температуру в градусах по Цельсию ');
var tf = (9 / 5) * tc + 32;
alert('температура в градусах по Фаренгейту:  ' + tf);

/* 2.Объявить две переменные: admin и name. Записать в name строку "Василий"; 
 Скопировать значение из name в admin. Вывести admin (должно вывестись «Василий»).*/

var name = 'Василий';
var admin = name;
document.write(admin);

/* 3.Чему будет равно JS-выражение 1000 + "108"?
Выражение будет равно 1000108. Один операнд являеться строкой, поэтому 1000 тоже преобразована в строку, а "+" объединяет их в одну.*/

/* 4.Самостоятельно разобраться с атрибутами тега script (async и defer).

Подключаемые скрипты JavaScript блокируют загрузку HTML кода. Когда браузер доходит до тега script он останавливаеться,
чтобы загрузить контент файла и выполнить его код, и только после этого продолжает парсинг HTML, это тормозит отображение HTML. 
Именно поэтому рекомендуеться подключать скрипты в конце страницы.
Атрибуты async и defer могут дать больше контроля над тем, как и когда файлы загружаются и выполняются.
Для файлов, которые не нужны для работы других скриптов и сами не имеют зависимостей от других скриптов, атрибут async особенно полезен. 
Т.к. в этом случае не важно в какой именно момент выполниться скрипт, асихронная загрузка являеться наиболее подходящим вариантом.
При использовании нескольких скриптов async первым загрузится тот, который имеет меньший размер.
Чтобы скрипт выполнился когда страниться загрузится полностью, нужно использовать defer. 
При использовании нескольких скриптов defer первым загрузится тот, который был раньше указан, независимо от размера
При использовании одновременно атрибуты defer и async, браузер будет использовать только async*/